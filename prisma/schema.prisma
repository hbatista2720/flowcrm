generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  password  String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  accounts Account[]
  sessions Session[]
  bots     Bot[]
  leads    Lead[]
  conversations Conversation[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Bot {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(false)
  qrCode      String?
  whatsappConnected Boolean @default(false)
  flowData    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversations Conversation[]

  @@map("bots")
}

model Lead {
  id          String   @id @default(cuid())
  name        String
  phone       String
  email       String?
  status      String   @default("NEW")
  value       Float?
  source      String   @default("whatsapp")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversations Conversation[]

  @@map("leads")
}

model Conversation {
  id        String   @id @default(cuid())
  phone     String
  messages  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  botId String?
  bot   Bot?   @relation(fields: [botId], references: [id])

  leadId String?
  lead   Lead?  @relation(fields: [leadId], references: [id])

  @@map("conversations")
}